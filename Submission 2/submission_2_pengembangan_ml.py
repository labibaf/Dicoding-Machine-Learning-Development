# -*- coding: utf-8 -*-
"""Submission 2 Pengembangan ML

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ei-IJln5ssO2llApPqK1MdCdt2bkxtzU

# Submission 2 Pengembangan Machine Learning

Labib Ammar Fadhali | labibfadhali12@gmail.com

**Konfigurasi Kaggle**
"""

!pip install -q kaggle

from google.colab import files
upload=files.upload()

!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d emmanuelfwerr/london-weather-data

!unzip '/content/london-weather-data.zip' -d '/content'

"""**Membaca Dataset**"""

import numpy as np
import pandas as pd
from keras.layers import Dense,LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

df=pd.read_csv('/content/london_weather.csv')
df.head()

df.info()

df.isnull().sum()

"""**Membersihkan Data**"""

df[df.mean_temp.isna()]

df.mean_temp.value_counts()

df.mean_temp.interpolate(method='linear',limit_direction='forward',inplace=True)
df.isnull().sum()

new_df=df[['date','mean_temp']]
new_df

new_df['date']=pd.to_datetime(new_df['date'], format='%Y%m%d')
new_df

new_df.info()

"""**Normalisasi**"""

from sklearn.preprocessing import MinMaxScaler

scaler=MinMaxScaler()
new_df['mean_temp']=scaler.fit_transform(new_df['mean_temp'].values.reshape(-1, 1))
new_df

date=new_df['date'].values
temp=new_df['mean_temp'].values

plt.figure(figsize=(20,8))
plt.plot(date,temp)
plt.title('Average Temp', fontsize=20)

"""Membuat fungsi mengubah data menjadi format yang dapat diterima oleh model"""

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

"""Melakukan split data menjadi 80% data train dan 20% data test"""

from sklearn.model_selection import train_test_split

temp_train,temp_test,date_train,date_test=train_test_split(temp,date, test_size=0.2, shuffle=False)

print('Train:',len(temp_train)) ##12272
print('Test:',len(temp_test))   ##3069

train_set = windowed_dataset(temp_train, window_size=60, batch_size=100, shuffle_buffer=5000)
test_set = windowed_dataset(temp_test, window_size=60, batch_size=100, shuffle_buffer=5000)
model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.LSTM(64),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1)
])

max=new_df['mean_temp'].max()
print(max)
min=new_df['mean_temp'].min()
print(min)

treshold_mae=(max-min)*10/100
print(treshold_mae)

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self,epoch,logs={}):
    if(logs.get('mae') < treshold_mae):
      print('\n MAE < ',treshold_mae)
      self.model.stop_training=True
callbacks=myCallback()

"""Melatih model"""

optimizer = tf.keras.optimizers.SGD(learning_rate=0.0001, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])
history = model.fit(train_set,
                    epochs=100,
                    validation_data=test_set,
                    verbose=2,
                    callbacks=[callbacks])

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper right')
plt.show()

plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Model mae')
plt.ylabel('MAE')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='lower right')
plt.show()